basePath: /
definitions:
  handlers.AddDishPayload:
    properties:
      dish_category:
        type: integer
      dish_description:
        type: string
      dish_name:
        type: string
      dish_photo:
        type: string
      dish_price:
        type: number
      dish_weight:
        type: number
    required:
    - dish_category
    - dish_description
    - dish_name
    - dish_photo
    - dish_price
    - dish_weight
    type: object
  handlers.ChangeDishPayload:
    properties:
      dish_category:
        type: integer
      dish_description:
        type: string
      dish_name:
        type: string
      dish_photo:
        type: string
      dish_price:
        type: number
      dish_weight:
        type: number
      id:
        type: integer
    required:
    - dish_category
    - dish_description
    - dish_name
    - dish_photo
    - dish_price
    - dish_weight
    - id
    type: object
  handlers.ChangePasswordPayload:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  handlers.ChangePhotoPayload:
    properties:
      photo:
        type: string
    required:
    - photo
    type: object
  handlers.GetDishesByCategoryPayload:
    properties:
      dish_category:
        type: string
    required:
    - dish_category
    type: object
  handlers.LoginPayload:
    properties:
      user_login:
        type: string
      user_password:
        type: string
    required:
    - user_login
    - user_password
    type: object
  models.APIError:
    properties:
      message:
        type: string
    type: object
  models.ChangeUserCredsPayload:
    properties:
      user_address:
        type: string
      user_login:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
      user_surname:
        type: string
    required:
    - user_address
    - user_login
    - user_name
    - user_phone
    - user_surname
    type: object
  models.Dish:
    properties:
      dish_category:
        type: string
      dish_description:
        type: string
      dish_name:
        type: string
      dish_photo_url:
        type: string
      dish_price:
        type: number
      dish_rating:
        type: integer
      dish_weight:
        type: number
    required:
    - dish_description
    - dish_name
    - dish_photo_url
    - dish_price
    - dish_weight
    type: object
  models.UserInfo:
    properties:
      user_address:
        type: string
      user_login:
        type: string
      user_name:
        type: string
      user_phone:
        type: string
      user_photo:
        type: string
      user_role:
        type: string
      user_surname:
        type: string
    required:
    - user_address
    - user_login
    - user_name
    - user_phone
    - user_photo
    - user_role
    - user_surname
    type: object
  models.UserReg:
    properties:
      user_address:
        type: string
      user_login:
        type: string
      user_name:
        type: string
      user_password:
        type: string
      user_phone:
        type: string
      user_role:
        type: string
      user_surname:
        type: string
    required:
    - user_address
    - user_login
    - user_name
    - user_password
    - user_phone
    - user_role
    - user_surname
    type: object
host: localhost:1317
info:
  contact:
    email: support@example.com
    name: API Support
  description: API documentation for the Delivery Backend
  title: Delivery Backend API
  version: "1.0"
paths:
  /api/dishes:
    get:
      description: Retrieve a list of all available dishes
      produces:
      - application/json
      responses:
        "200":
          description: List of dishes
          schema:
            items:
              items:
                $ref: '#/definitions/models.Dish'
              type: array
            type: array
        "404":
          description: No dishes found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to retrieve dishes
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get all dishes
      tags:
      - Dishes
  /api/dishes/admin/add:
    post:
      consumes:
      - application/json
      description: Create a new dish with the provided details
      parameters:
      - description: Dish details
        in: body
        name: dish
        required: true
        schema:
          $ref: '#/definitions/handlers.AddDishPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Dish created successfully
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Access forbidden
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to add dish
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Add a new dish
      tags:
      - Dishes/Secure
  /api/dishes/admin/delete/{id}:
    delete:
      description: Remove a dish from the system by its ID
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Dish deleted successfully
        "400":
          description: Invalid dish ID
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Access forbidden
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to delete dish
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete a dish by ID
      tags:
      - Dishes/Secure
  /api/dishes/admin/update:
    put:
      consumes:
      - application/json
      description: Update the details of an existing dish
      parameters:
      - description: Dish details
        in: body
        name: dish
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangeDishPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Dish updated successfully
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Access forbidden
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to update dish
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update dish details
      tags:
      - Dishes/Secure
  /api/dishes/by_category:
    post:
      consumes:
      - application/json
      description: Retrieve a list of dishes based on their category
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.GetDishesByCategoryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: List of dishes
          schema:
            items:
              items:
                $ref: '#/definitions/models.Dish'
              type: array
            type: array
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: No dishes found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to retrieve dishes
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get dishes by category
      tags:
      - Dishes
  /api/dishes/by_id/{dish_id}:
    get:
      description: Retrieve a specific dish by its ID
      parameters:
      - description: Dish ID
        in: path
        name: dish_id
        required: true
        type: integer
      responses:
        "200":
          description: Dish details
          schema:
            $ref: '#/definitions/models.Dish'
        "400":
          description: Invalid dish ID
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: Dish not found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to retrieve dish
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get a dish by ID
      tags:
      - Dishes
  /api/dishes/search/{name}:
    get:
      description: Search for dishes by their name
      parameters:
      - description: Dish name
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: List of matching dishes
          schema:
            items:
              items:
                $ref: '#/definitions/models.Dish'
              type: array
            type: array
        "400":
          description: Query parameter 'name' is required
          schema:
            $ref: '#/definitions/models.APIError'
        "404":
          description: No dishes found
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Failed to search dishes
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search dishes by name
      tags:
      - Dishes
  /api/user/change:
    patch:
      consumes:
      - application/json
      description: Allows the logged-in user to update their details
      parameters:
      - description: Updated User Creds
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangeUserCredsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update user credentials
      tags:
      - user
  /api/user/change_password:
    patch:
      consumes:
      - application/json
      description: Allows the logged-in user to change their password
      parameters:
      - description: Old and New Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Invalid old password
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Change user password
      tags:
      - user
  /api/user/delete:
    delete:
      description: Deletes the logged-in user's account
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete user account
      tags:
      - user
  /api/user/info:
    get:
      description: Retrieves the details of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/models.UserInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get user info
      tags:
      - user
  /api/user/logout:
    post:
      description: Logs out the currently logged-in user by clearing the authentication
        token cookie.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Logout user
      tags:
      - auth
  /api/user/photo:
    patch:
      consumes:
      - application/json
      description: Allows the logged-in user to update their profile photo
      parameters:
      - description: Photo Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ChangePhotoPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update user photo
      tags:
      - user
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a token in a cookie
      parameters:
      - description: User Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Log in a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns a token in a cookie
      parameters:
      - description: User Registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserReg'
      responses:
        "200":
          description: Token in cookie
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
